name: Documentation Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  confluence-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt

      - name: Analyze PR with Confluence tools
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CONFLUENCE_URL: ${{ secrets.CONFLUENCE_URL }}
          CONFLUENCE_USERNAME: ${{ secrets.CONFLUENCE_USERNAME }}
          CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_NAME: ${{ github.repository }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: python .github/scripts/analyze_pr.py

      - name: Upload analysis artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: confluence-analysis-results
          path: |
            confluence_actions.json
          retention-days: 5

      - name: Comment on PR with results
        if: success()
        uses: actions/github-script@v7
        env:
          CONFLUENCE_URL: ${{ secrets.CONFLUENCE_URL }}
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('confluence_actions.json')) {
              const comment = `## üìã AI Documentation Review
              
              ‚ö†Ô∏è No structured analysis results were found. Please check the [workflow logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.
              
              ---
              *Analysis powered by GPT-4o*`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              return;
            }

            try {
              const results = JSON.parse(fs.readFileSync('confluence_actions.json', 'utf8'));
              const confluenceUrl = process.env.CONFLUENCE_URL;
              
              let comment = '## üìã AI Documentation Review\n\n';
              
              // Executive Summary
              comment += '### üìä Executive Summary\n\n';
              comment += `> **Impact:** ${results.summary || 'Analysis completed'}\n`;
              comment += `> **Total Actions:** ${results.total_actions || 0}\n`;
              comment += `> **Estimated Effort:** ${results.estimated_total_effort || 'Unknown'}\n`;
              comment += `> **Spaces Affected:** ${results.spaces_affected?.join(', ') || 'N/A'}\n`;
              
              if (results.change_categories && results.change_categories.length > 0) {
                comment += `> **Change Categories:** ${results.change_categories.join(', ')}\n`;
              }
              
              if (results.user_impact_summary) {
                comment += `> **User Impact:** ${results.user_impact_summary}\n`;
              }
              
              comment += '\n';

              // Critical Updates Section
              if (results.critical_updates && results.critical_updates.length > 0) {
                comment += '### üö® Critical Updates Required\n\n';
                results.critical_updates.forEach(update => {
                  comment += `- ‚ö†Ô∏è ${update}\n`;
                });
                comment += '\n';
              }

              // Documentation Actions
              if (results.confluence_actions && results.confluence_actions.length > 0) {
                comment += '### üìù Documentation Actions Required\n\n';

                // Group by priority (including the new 'critical' priority)
                const priorities = {
                  Critical: results.confluence_actions.filter(a => a.priority === 'critical'),
                  High: results.confluence_actions.filter(a => a.priority === 'high'),
                  Medium: results.confluence_actions.filter(a => a.priority === 'medium'),
                  Low: results.confluence_actions.filter(a => a.priority === 'low')
                };

                const priorityEmojis = {
                  Critical: 'üö®',
                  High: 'üî¥',
                  Medium: 'üü°', 
                  Low: 'üü¢'
                };

                const processActions = (actions, label) => {
                  if (actions.length === 0) return;
                  
                  comment += `#### ${priorityEmojis[label]} ${label} Priority (${actions.length} action${actions.length > 1 ? 's' : ''})\n\n`;
                  
                  actions.forEach((action, index) => {
                    const pageTitle = action.page_title;
                    const actionVerb = action.action === 'update_page' ? 'Update' : 
                                     action.action === 'create_page' ? 'Create' : 
                                     action.action === 'review_page' ? 'Review' : 'Modify';
                    
                    comment += `<details>\n`;
                    comment += `<summary><strong>${actionVerb}: ${pageTitle}</strong> ${action.estimated_time ? `(~${action.estimated_time})` : ''}</summary>\n\n`;
                    
                    // Basic info
                    comment += `**Space:** ${action.space_key}\n`;
                    comment += `**Reason:** ${action.reason}\n`;
                    
                    if (action.change_category) {
                      comment += `**Change Type:** ${action.change_category}\n`;
                    }
                    
                    if (action.affected_audiences && action.affected_audiences.length > 0) {
                      comment += `**Affects:** ${action.affected_audiences.join(', ')}\n`;
                    }
                    
                    if (action.breaking_changes) {
                      comment += `**‚ö†Ô∏è Breaking Changes:** Yes\n`;
                    }
                    
                    if (action.migration_required) {
                      comment += `**üìã Migration Required:** Yes\n`;
                    }
                    
                    comment += '\n';

                    // Content sections
                    if (action.content_sections && action.content_sections.length > 0) {
                      comment += `**Sections to Update:**\n`;
                      action.content_sections.forEach(section => {
                        const changeIcon = section.change_type === 'add' ? '‚ûï' : 
                                          section.change_type === 'update' ? '‚úèÔ∏è' : 
                                          section.change_type === 'remove' ? '‚ùå' : 'üîÑ';
                        comment += `- ${changeIcon} **${section.section_name}**: ${section.required_changes}\n`;
                        
                        if (section.example_content && section.example_content.length < 200) {
                          comment += `  \`\`\`\n  ${section.example_content}\n  \`\`\`\n`;
                        }
                      });
                      comment += '\n';
                    }

                    // Before/after examples
                    if (action.before_after_examples) {
                      comment += `**Examples:**\n`;
                      comment += `\`\`\`\n${action.before_after_examples}\n\`\`\`\n\n`;
                    }

                    // Implementation notes
                    if (action.implementation_notes) {
                      comment += `**Implementation Notes:** ${action.implementation_notes}\n\n`;
                    }

                    // Related pages
                    if (action.related_pages && action.related_pages.length > 0) {
                      comment += `**Related Pages:** ${action.related_pages.join(', ')}\n\n`;
                    }

                    // Action links
                    if (action.action === 'update_page' && action.page_id) {
                      comment += `[üìù **Edit Page**](${confluenceUrl}/wiki/spaces/${action.space_key}/pages/${action.page_id}) | `;
                      comment += `[üëÅÔ∏è **View Page**](${confluenceUrl}/wiki/spaces/${action.space_key}/pages/${action.page_id})\n`;
                    } else if (action.action === 'create_page') {
                      comment += `[‚ûï **Create Page**](${confluenceUrl}/wiki/pages/createpage.action?spaceKey=${action.space_key}&title=${encodeURIComponent(pageTitle)})\n`;
                    }
                    
                    comment += `</details>\n\n`;
                  });
                };

                // Process each priority level
                processActions(priorities.Critical, 'Critical');
                processActions(priorities.High, 'High');
                processActions(priorities.Medium, 'Medium');
                processActions(priorities.Low, 'Low');

              } else {
                comment += '### ‚úÖ No Documentation Updates Required\n\n';
                comment += 'This PR does not appear to require any documentation changes.\n\n';
              }

              // Rollout recommendations
              if (results.rollout_recommendations) {
                comment += '### üöÄ Rollout Recommendations\n\n';
                comment += `${results.rollout_recommendations}\n\n`;
              }

              // Footer
              comment += '---\n\n';
              comment += '<details>\n';
              comment += '<summary>‚ÑπÔ∏è <strong>Analysis Details</strong></summary>\n\n';
              comment += `**Analysis powered by GPT-4o** | [View Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n`;
              comment += '**Documentation Philosophy:** Great documentation prevents support tickets, reduces onboarding time, and enables users to succeed independently. Each recommendation focuses on creating content that truly serves user needs and business objectives.\n\n';
              
              if (results.total_actions > 0) {
                comment += '**Next Steps:**\n';
                comment += '1. Review and prioritize the documentation actions above\n';
                comment += '2. Assign team members to handle critical and high-priority updates\n';
                comment += '3. Update documentation before or immediately after merging this PR\n';
                comment += '4. Validate that users can successfully follow the updated documentation\n\n';
              }
              
              comment += '</details>';

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });

            } catch (error) {
              const errorComment = `## üìã AI Documentation Review
              
              ‚ùå **Error formatting analysis results:** ${error.message}
              
              Please check the [workflow logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.
              
              ---
              *Analysis powered by GPT-4o*`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: errorComment
              });
            }

      - name: Handle workflow failures
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üìã AI Documentation Review
            
            ‚ùå **Documentation Analysis Failed**

            The automated documentation review encountered an error and could not complete.

            ### üîß Troubleshooting Steps
            1. **Check the [Workflow Logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})** for detailed error messages
            2. Verify that all required repository secrets are configured correctly:
               - \`OPENAI_API_KEY\`
               - \`CONFLUENCE_URL\` 
               - \`CONFLUENCE_USERNAME\`
               - \`CONFLUENCE_API_TOKEN\`
               - \`GITHUB_TOKEN\` (should be automatic)
            3. Ensure the Confluence and OpenAI API credentials are valid and have necessary permissions
            4. Check if the repository has the required \`.github/scripts/requirements.txt\` file

            ### üÜò Need Help?
            If the issue persists, please:
            - Review the workflow configuration
            - Test API connections manually
            - Contact your DevOps team for assistance

            ---
            *Analysis powered by GPT-4o*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

name: Documentation Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  confluence-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # <--- FIX: Install all dependencies from the new requirements.txt file
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt

      # <--- IMPROVEMENT: This step is redundant and has been removed.
      # The checkout step already creates the necessary directory structure.
      # - name: Create scripts directory
      #   run: mkdir -p .github/scripts

      - name: Analyze PR with Confluence tools
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CONFLUENCE_URL: ${{ secrets.CONFLUENCE_URL }}
          CONFLUENCE_USERNAME: ${{ secrets.CONFLUENCE_USERNAME }}
          CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_NAME: ${{ github.repository }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: python .github/scripts/analyze_pr.py

      - name: Upload analysis artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: confluence-analysis-results
          # <--- FIX: Only upload files that are actually created by the script.
          path: |
            confluence_actions.json
            logfire.log
          retention-days: 5 # 30 days is long for temporary artifacts

      - name: Comment on PR with results
        if: success()
        uses: actions/github-script@v7
        # <--- FIX: Pass the CONFLUENCE_URL to the script context so it can build correct links.
        env:
          CONFLUENCE_URL: ${{ secrets.CONFLUENCE_URL }}
        with:
          script: |
            const fs = require('fs');
            let comment = '## üìã AI Documentation Review\n\n';

            try {
              if (fs.existsSync('confluence_actions.json')) {
                const results = JSON.parse(fs.readFileSync('confluence_actions.json', 'utf8'));

                comment += `> **Summary:** ${results.summary || 'Analysis completed'}\n`;
                comment += `> **Actions Required:** ${results.total_actions || 0}\n`;
                comment += `> **Estimated Effort:** ${results.estimated_effort || 'Unknown'}\n`;
                comment += `> **Spaces Affected:** ${results.spaces_affected?.join(', ') || 'N/A'}\n\n`;

                if (results.confluence_actions && results.confluence_actions.length > 0) {
                  comment += '### Documentation Actions Required\n\n';

                  const priorities = {
                    High: results.confluence_actions.filter(a => a.priority === 'high'),
                    Medium: results.confluence_actions.filter(a => a.priority === 'medium'),
                    Low: results.confluence_actions.filter(a => a.priority === 'low'),
                  };

                  const processActions = (actions, label) => {
                    if (actions.length > 0) {
                      comment += `#### ${label} Priority\n\n`;
                      actions.forEach(action => {
                        const pageTitle = action.page_title || action.new_page_title;
                        const confluenceUrl = process.env.CONFLUENCE_URL; // Now available from the env block

                        comment += `**${action.action === 'update_page' ? 'Update' : 'Create'}: ${pageTitle}**\n`;
                        comment += `- **Space:** ${action.space_key}\n`;
                        comment += `- **Reason:** ${action.reason}\n`;
                        comment += `- **Changes:**\n\`\`\`\n${action.specific_changes}\n\`\`\`\n`;

                        if (action.action === 'update_page' && action.page_id) {
                           comment += `- [**View Page**](${confluenceUrl}/wiki/spaces/${action.space_key}/pages/${action.page_id})\n`;
                        } else if (action.action === 'create_page') {
                          comment += `- [**Create Page**](${confluenceUrl}/wiki/pages/createpage.action?spaceKey=${action.space_key}&title=${encodeURIComponent(pageTitle)})\n`;
                        }
                        comment += '\n';
                      });
                    }
                  };

                  processActions(priorities.High, 'High');
                  processActions(priorities.Medium, 'Medium');
                  processActions(priorities.Low, 'Low');

                } else {
                  comment += '‚úÖ No documentation updates required for this PR.\n\n';
                }

              } else {
                comment += '‚ö†Ô∏è No structured analysis results were found. Please check the workflow logs for details.\n\n';
              }

            } catch (error) {
              comment += `‚ùå An error occurred while formatting the analysis results: ${error.message}\n\n`;
            }

            comment += '---\n';
            
            comment += `*Analysis powered by GPT-4o. [View Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})*`;
            comment += `Remember: Great documentation prevents support tickets, reduces onboarding time, and enables users to succeed independently. Focus on creating content that truly serves the user's needs and business objectives.\n\n';


            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Handle workflow failures
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ‚ùå Documentation Analysis Failed

            The automated documentation review encountered an error and could not complete.

            **Troubleshooting Steps:**
            1.  **Check the [Workflow Logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})** for the detailed error message.
            2.  Verify that all required repository secrets are configured correctly (\`OPENAI_API_KEY\`, \`CONFLUENCE_URL\`, etc.).
            3.  Ensure the Confluence and OpenAI API credentials are valid and have the necessary permissions.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

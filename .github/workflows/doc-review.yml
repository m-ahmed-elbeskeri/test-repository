name: Documentation Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  confluence-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt

      - name: Analyze PR with Confluence tools
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CONFLUENCE_URL: ${{ secrets.CONFLUENCE_URL }}
          CONFLUENCE_USERNAME: ${{ secrets.CONFLUENCE_USERNAME }}
          CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_NAME: ${{ github.repository }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: python .github/scripts/analyze_pr.py

      - name: Upload analysis artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: confluence-analysis-results
          path: |
            confluence_actions.json
          retention-days: 5

      - name: Comment on PR with comprehensive results
        if: success()
        uses: actions/github-script@v7
        env:
          CONFLUENCE_URL: ${{ secrets.CONFLUENCE_URL }}
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('confluence_actions.json')) {
              const comment = `## üìã AI Documentation Review
              
              ‚ö†Ô∏è No structured analysis results were found. Please check the [workflow logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.
              
              ---
              *Analysis powered by GPT-4o*`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              return;
            }

            try {
              const results = JSON.parse(fs.readFileSync('confluence_actions.json', 'utf8'));
              const confluenceUrl = process.env.CONFLUENCE_URL;
              
              // Helper function to split large content into multiple comments if needed
              const postComment = async (content) => {
                // GitHub comment limit is ~65,536 characters, use 60,000 to be safe
                const MAX_COMMENT_LENGTH = 60000;
                
                if (content.length <= MAX_COMMENT_LENGTH) {
                  await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: content
                  });
                } else {
                  // Split into multiple comments
                  const parts = [];
                  let currentPart = '';
                  const lines = content.split('\n');
                  
                  for (const line of lines) {
                    if ((currentPart + line + '\n').length > MAX_COMMENT_LENGTH) {
                      if (currentPart) parts.push(currentPart);
                      currentPart = line + '\n';
                    } else {
                      currentPart += line + '\n';
                    }
                  }
                  if (currentPart) parts.push(currentPart);
                  
                  // Post each part as a separate comment
                  for (let i = 0; i < parts.length; i++) {
                    const header = i === 0 ? '' : `### üìã Documentation Review (Part ${i + 1}/${parts.length})\n\n`;
                    await github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: header + parts[i]
                    });
                  }
                }
              };
              
              let comment = '## üìã AI Documentation Review\n\n';
              
              // Executive Summary
              comment += '### üìä Executive Summary\n\n';
              comment += `**Strategy:** ${results.content_strategy || 'Hybrid approach analysis'}\n\n`;
              comment += `**Impact:** ${results.summary || 'Analysis completed'}\n\n`;
              comment += `**Total Actions:** ${results.total_actions || 0}\n\n`;
              comment += `**Estimated Effort:** ${results.estimated_total_effort || 'Unknown'}\n\n`;
              comment += `**Spaces Affected:** ${results.spaces_affected?.join(', ') || 'N/A'}\n\n`;
              
              if (results.change_categories && results.change_categories.length > 0) {
                comment += `**Change Categories:** ${results.change_categories.join(', ')}\n\n`;
              }
              
              if (results.user_impact_summary) {
                comment += `**User Impact:** ${results.user_impact_summary}\n\n`;
              }

              // Critical Updates Section
              if (results.critical_updates && results.critical_updates.length > 0) {
                comment += '### üö® Critical Updates Required\n\n';
                results.critical_updates.forEach(update => {
                  comment += `‚ö†Ô∏è ${update}\n\n`;
                });
              }

              // Documentation Actions
              if (results.confluence_actions && results.confluence_actions.length > 0) {
                comment += '### üìù Documentation Actions Required\n\n';

                // Group by priority
                const priorities = {
                  critical: results.confluence_actions.filter(a => a.priority === 'critical'),
                  high: results.confluence_actions.filter(a => a.priority === 'high'),
                  medium: results.confluence_actions.filter(a => a.priority === 'medium'),
                  low: results.confluence_actions.filter(a => a.priority === 'low')
                };

                const priorityEmojis = {
                  critical: 'üö®',
                  high: 'üî¥',
                  medium: 'üü°', 
                  low: 'üü¢'
                };

                const priorityLabels = {
                  critical: 'Critical',
                  high: 'High',
                  medium: 'Medium',
                  low: 'Low'
                };

                const processActions = (actions, priorityKey) => {
                  if (actions.length === 0) return;
                  
                  const label = priorityLabels[priorityKey];
                  comment += `#### ${priorityEmojis[priorityKey]} ${label} Priority (${actions.length} action${actions.length > 1 ? 's' : ''})\n\n`;
                  
                  actions.forEach((action, index) => {
                    const pageTitle = action.page_title;
                    const actionVerb = action.action === 'update_page' ? 'Update' : 
                                     action.action === 'create_page' ? 'Create' : 
                                     action.action === 'review_page' ? 'Review' : 'Modify';
                    
                    comment += `**${actionVerb}: ${pageTitle}** ${action.estimated_time ? `(~${action.estimated_time})` : ''}\n\n`;
                    
                    // Basic info
                    comment += `**Space:** ${action.space_key}\n\n`;
                    comment += `**Reason:** ${action.reason}\n\n`;
                    
                    if (action.change_category) {
                      comment += `**Change Type:** ${action.change_category}\n\n`;
                    }
                    
                    if (action.affected_audiences && action.affected_audiences.length > 0) {
                      comment += `**Affects:** ${action.affected_audiences.join(', ')}\n\n`;
                    }
                    
                    if (action.breaking_changes) {
                      comment += `**‚ö†Ô∏è Breaking Changes:** Yes\n\n`;
                    }
                    
                    if (action.migration_required) {
                      comment += `**üìã Migration Required:** Yes\n\n`;
                    }

                    // FULL CONTENT APPROACH - NO TRUNCATION
                    if (action.action === 'create_page' && action.complete_content) {
                      // NEW PAGE - Complete Content
                      comment += `**üìÑ Complete Page Content (Ready to paste):**\n\n`;
                      
                      if (action.complete_content.page_structure) {
                        comment += `**Page Structure:**\n\n`;
                        action.complete_content.page_structure.forEach(section => {
                          comment += `- ${section}\n`;
                        });
                        comment += '\n';
                      }
                      
                      if (action.complete_content.estimated_read_time) {
                        comment += `**Estimated Read Time:** ${action.complete_content.estimated_read_time}\n\n`;
                      }
                      
                      comment += `**Confluence Markup:**\n\n`;
                      comment += `\`\`\`xml\n${action.complete_content.confluence_markup}\n\`\`\`\n\n`;
                      
                      if (action.complete_content.markdown_version) {
                        comment += `<details>\n<summary>üìù <strong>Markdown Version (for reference)</strong></summary>\n\n`;
                        comment += `\`\`\`markdown\n${action.complete_content.markdown_version}\n\`\`\`\n\n`;
                        comment += `</details>\n\n`;
                      }
                      
                    } else if (action.action === 'update_page' && action.contextual_updates) {
                      // EXISTING PAGE - Contextual Updates
                      comment += `**üéØ Contextual Updates (Precise placement):**\n\n`;
                      
                      action.contextual_updates.forEach((update, idx) => {
                        comment += `**Update ${idx + 1}: ${update.update_type}**\n\n`;
                        comment += `- **Location:** ${update.position_description}\n`;
                        if (update.target_heading) {
                          comment += `- **Target:** ${update.target_heading}\n`;
                        }
                        comment += `- **Action:** ${update.location_type}\n`;
                        comment += `- **Preview:** ${update.content_preview}...\n\n`;
                        comment += `**Full Content to Add:**\n\n`;
                        comment += `\`\`\`xml\n${update.content_to_add}\n\`\`\`\n\n`;
                      });
                    }

                    // Implementation notes
                    if (action.implementation_notes) {
                      comment += `**Implementation Notes:** ${action.implementation_notes}\n\n`;
                    }

                    // Before/after examples
                    if (action.before_after_examples) {
                      comment += `**Before/After Examples:**\n\n`;
                      comment += `\`\`\`\n${action.before_after_examples}\n\`\`\`\n\n`;
                    }

                    // Validation checklist
                    if (action.validation_checklist && action.validation_checklist.length > 0) {
                      comment += `**Validation Checklist:**\n\n`;
                      action.validation_checklist.forEach(item => {
                        comment += `- [ ] ${item}\n`;
                      });
                      comment += '\n';
                    }

                    // Related pages
                    if (action.related_pages && action.related_pages.length > 0) {
                      comment += `**Related Pages:** ${action.related_pages.join(', ')}\n\n`;
                    }

                    // Action links
                    if (action.action === 'update_page' && action.page_id) {
                      comment += `[üìù **Edit Page**](${confluenceUrl}/wiki/spaces/${action.space_key}/pages/${action.page_id}) | `;
                      comment += `[üëÅÔ∏è **View Page**](${confluenceUrl}/wiki/spaces/${action.space_key}/pages/${action.page_id})\n\n`;
                    } else if (action.action === 'create_page') {
                      comment += `[‚ûï **Create Page**](${confluenceUrl}/wiki/pages/createpage.action?spaceKey=${action.space_key}&title=${encodeURIComponent(pageTitle)})\n\n`;
                    }
                    
                    comment += '---\n\n';
                  });
                };

                // Process each priority level
                processActions(priorities.critical, 'critical');
                processActions(priorities.high, 'high');
                processActions(priorities.medium, 'medium');
                processActions(priorities.low, 'low');

              } else {
                comment += '### ‚úÖ No Documentation Updates Required\n\n';
                comment += 'This PR does not appear to require any documentation changes.\n\n';
              }

              // Rollout recommendations
              if (results.rollout_recommendations) {
                comment += '### üöÄ Rollout Recommendations\n\n';
                comment += `${results.rollout_recommendations}\n\n`;
              }

              // Footer
              comment += '---\n\n';
              comment += '<details>\n';
              comment += '<summary>‚ÑπÔ∏è <strong>Analysis Details</strong></summary>\n\n';
              comment += `**Analysis powered by GPT-4o** | [View Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n`;
              comment += '**Hybrid Documentation Approach:**\n';
              comment += '- **New Pages:** Complete, ready-to-paste Confluence content\n';
              comment += '- **Existing Updates:** Precise, contextual enhancements\n';
              comment += '- **Quality Focus:** Professional, immediately actionable guidance\n\n';
              
              if (results.total_actions > 0) {
                comment += '**Next Steps:**\n';
                comment += '1. Review and prioritize the documentation actions above\n';
                comment += '2. For new pages: Copy the complete content and paste into Confluence\n';
                comment += '3. For updates: Follow the precise placement guidance\n';
                comment += '4. Use validation checklists to ensure quality\n';
                comment += '5. Cross-reference related pages for consistency\n\n';
              }
              
              comment += '</details>';

              // Post the comment (will split into multiple comments if too long)
              await postComment(comment);

            } catch (error) {
              const errorComment = `## üìã AI Documentation Review
              
              ‚ùå **Error formatting analysis results:** ${error.message}
              
              Please check the [workflow logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.
              
              ---
              *Analysis powered by GPT-4o*`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: errorComment
              });
            }

      - name: Handle workflow failures
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üìã AI Documentation Review
            
            ‚ùå **Documentation Analysis Failed**

            The automated documentation review encountered an error and could not complete.

            ### üîß Troubleshooting Steps
            1. **Check the [Workflow Logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})** for detailed error messages
            2. Verify that all required repository secrets are configured correctly:
               - \`OPENAI_API_KEY\`
               - \`CONFLUENCE_URL\` 
               - \`CONFLUENCE_USERNAME\`
               - \`CONFLUENCE_API_TOKEN\`
               - \`GITHUB_TOKEN\` (should be automatic)
            3. Ensure the Confluence and OpenAI API credentials are valid and have necessary permissions
            4. Check if the repository has the required \`.github/scripts/requirements.txt\` file

            ### üÜò Need Help?
            If the issue persists, please:
            - Review the workflow configuration
            - Test API connections manually
            - Contact your DevOps team for assistance

            ---
            *Analysis powered by GPT-4o*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

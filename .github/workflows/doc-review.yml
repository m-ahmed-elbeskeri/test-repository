name: Documentation Review
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  confluence-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install langchain-core langchain-openai langchain-community langchain requests atlassian-python-api

      - name: Create scripts directory
        run: mkdir -p .github/scripts

      - name: Analyze PR with Confluence tools
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          OPENROUTER_MODEL: ${{ secrets.OPENROUTER_MODEL }}
          CONFLUENCE_URL: ${{ secrets.CONFLUENCE_URL }}
          CONFLUENCE_USERNAME: ${{ secrets.CONFLUENCE_USERNAME }}
          CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_NAME: ${{ github.repository }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: python .github/scripts/analyze_pr.py

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: confluence-analysis-results
          path: |
            confluence_actions.json
            confluence_analysis_raw.txt
          retention-days: 30

      - name: Comment on PR with results
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Try to read the results
            let comment = '## üìã Documentation Review Results\n\n';
            
            try {
              // Check if JSON results exist
              if (fs.existsSync('confluence_actions.json')) {
                const results = JSON.parse(fs.readFileSync('confluence_actions.json', 'utf8'));
                
                comment += `**Summary:** ${results.summary || 'Analysis completed'}\n`;
                comment += `**Actions Required:** ${results.total_actions || 0}\n`;
                comment += `**Estimated Effort:** ${results.estimated_effort || 'Unknown'}\n\n`;
                
                if (results.confluence_actions && results.confluence_actions.length > 0) {
                  comment += '### üìù Documentation Actions Needed:\n\n';
                  
                  results.confluence_actions.forEach((action, index) => {
                    const priority = action.priority || 'medium';
                    const emoji = priority === 'high' ? 'üî¥' : priority === 'medium' ? 'üü°' : 'üü¢';
                    
                    comment += `${index + 1}. ${emoji} **${action.action === 'update_page' ? 'Update' : 'Create'}: ${action.page_title || action.new_page_title}**\n`;
                    comment += `   - Space: ${action.space_key}\n`;
                    comment += `   - Reason: ${action.reason}\n`;
                    if (action.specific_changes) {
                      comment += `   - Changes: ${action.specific_changes}\n`;
                    }
                    comment += '\n';
                  });
                } else {
                  comment += '‚úÖ No documentation updates required for this PR.\n\n';
                }
                
                comment += '### üéØ Next Steps:\n';
                comment += '- Review the analysis above\n';
                comment += '- React with ‚úÖ to approve documentation updates\n';
                comment += '- React with ‚ùå to skip documentation updates\n';
                comment += '- React with üîÑ for more details\n\n';
                
              } else {
                comment += '‚ö†Ô∏è Analysis completed but no structured results found.\n';
                comment += 'Check the workflow logs for details.\n\n';
              }
              
            } catch (error) {
              comment += `‚ùå Error reading analysis results: ${error.message}\n`;
              comment += 'Check the workflow artifacts for raw results.\n\n';
            }
            
            comment += `üìÅ **Artifacts:** Analysis results are available in the [workflow artifacts](${context.payload.repository.html_url}/actions/runs/${context.runId}).`;
            
            // Post the comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Handle workflow failures
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `## ‚ùå Documentation Analysis Failed
            
            The automated documentation review encountered an error.
            
            **Troubleshooting:**
            - Check the [workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details
            - Verify that all required secrets are configured
            - Ensure Confluence credentials are valid
            
            **Required Secrets:**
            - \`OPENROUTER_API_KEY\`
            - \`CONFLUENCE_URL\`
            - \`CONFLUENCE_USERNAME\`
            - \`CONFLUENCE_API_TOKEN\`
            
            Please review the configuration and re-run the workflow.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
